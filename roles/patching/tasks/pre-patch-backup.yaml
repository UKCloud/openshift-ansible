- name: Create patch directory on all hosts to store package lists
  file:
    path: /home/cloud-user/patching
    state: directory
    owner: cloud-user
    mode: 0755
    
- name: Write output of rpm -qa to file on all hosts
  shell: rpm -qa | sort > /home/cloud-user/patching/rpm-list-"{{ ansible_date_time.date }}"

- name: Backup htpasswd file
  copy:
    src: /etc/origin/master/htpasswd
    dest: /home/cloud-user/htpasswd.bak
    owner: cloud-user
    group: cloud-user
    mode: 0744
  become: yes
  when: inventory_hostname == groups.masters[0]

- name: Fetch htpasswd back to bastion
  fetch:
    src: /home/cloud-user/htpasswd.bak
    dest: /home/cloud-user/htpasswd.bak
    flat: yes
  when: inventory_hostname == groups.masters[0]

- name: Backup etcd data dir
  shell: docker exec etcd_container etcdctl backup --data-dir /var/lib/etcd --backup-dir /var/lib/etcd.bak
  become: yes
  when: inventory_hostname == groups.masters[0]

- name: Backup etcd db
  shell: docker exec etcd_container cp /var/lib/etcd/member/snap/db /var/lib/etcd.bak/member/snap/db
  become: yes
  when: inventory_hostname == groups.masters[0]

- name: Copy backup files from container to host
  shell: docker cp etcd_container:/var/lib/etcd.bak /home/cloud-user/etcd.bak
  become: yes
  when: inventory_hostname == groups.masters[0]

- name: Clean up backup file in container
  shell: docker exec etcd_container rm -rf /var/lib/etcd.bak
  become: yes
  when: inventory_hostname == groups.masters[0]

- name: Change permissions of backup
  shell: chown -R cloud-user /home/cloud-user/etcd.bak
  become: yes
  when: inventory_hostname == groups.masters[0]

- name: tar etcd backup
  archive:
    path: /home/cloud-user/etcd.bak
    dest: /home/cloud-user/etcd.bak.tar
    format: tar
  when: inventory_hostname == groups.masters[0]

- name: Fetch tar file back to bastion
  fetch:
    src: /home/cloud-user/etcd.bak.tar
    dest: /home/cloud-user/etcd.bak.tar
    flat: yes
  when: inventory_hostname == groups.masters[0]

- name: Check if epel file exists and register var
  stat:
    path: /tmp/epel-release-latest-7.noarch.rpm
  register: epel_file_state
  when: inventory_hostname == 'localhost'

- name: Create variable for epel_file_state.stat.exists
  set_fact:
    epel_installed: "{{ epel_file_state.stat.exists }}"
  when: inventory_hostname == 'localhost'

- name: Download epel repo rpm
  get_url:
    url: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    dest: /tmp/epel-release-latest-7.noarch.rpm
  when: inventory_hostname == 'localhost' and not epel_installed

- name: Set permissions on downloaded rpm.
  file:
    path: /tmp/epel-release-latest-7.noarch.rpm
    mode: 0777
  when: inventory_hostname == 'localhost' and not epel_installed

- name: Install epel repo
  yum:
    name: /tmp/epel-release-latest-7.noarch.rpm
    state: present
  become: yes
  become_method: sudo
  when: inventory_hostname == 'localhost' and not epel_installed

- name: Install pip
  yum:
    name: python-pip
    state: latest
  become: yes
  when: inventory_hostname == 'localhost' and not epel_installed

- name: Install boto3 with pip
  pip:
    name: boto3
  become: true
  when: inventory_hostname == 'localhost' and not epel_installed

- name: Lock down epel repo to pip only
  lineinfile: 
    path: /etc/yum.repos.d/epel.repo
    insertafter: '^enabled=1'
    line: includepkgs=python2-pip*
  become: yes
  become_method: sudo
  when: inventory_hostname == 'localhost' and not epel_installed

- name: Send pre-patching etcd backup to bucket in S3
  aws_s3:
    aws_access_key: "{{ s3accesskey }}"
    aws_secret_key: "{{ s3secretkey }}"
    s3_url: "https://{{ s3regionendpoint }}"
    bucket: "{{ s3bucketname }}"
    object: "/backups/patching/etcd/etcd-{{ ansible_date_time.date }}.tar"
    src: "/home/cloud-user/etcd.bak.tar"
    mode: put
    rgw: true
  when: inventory_hostname == 'localhost'

- name Send htpasswd backup to bucket in S3
  aws_s3:
    aws_access_key: "{{ s3accesskey }}"
    aws_secret_key: "{{ s3secretkey }}"
    s3_url: "https://{{ s3regionendpoint }}"
    bucket: "{{ s3bucketname }}"
    object: "/backups/patching/etcd/etcd-{{ ansible_date_time.date }}.tar"
    src: "/home/cloud-user/htpasswd.bak"
    mode: put
    rgw: true
  when: inventory_hostname == 'localhost'
