- name: Setup tier-1 storage class file
  template:
    src: templates/storage-class-tier1.j2
    dest: ~/storage-class-tier1.yml
    force: yes
    backup: yes

- name: Setup tier-2 storage class file
  template:
    src: templates/storage-class-tier2.j2
    dest: ~/storage-class-tier2.yml
    force: yes
    backup: yes

- name: create tier-1 class 
  command: /usr/local/bin/oc create -f ~/storage-class-tier1.yml

#- name: create tier-2 class 
#  command: /usr/local/bin/oc create -f ~/storage-class-tier2.yml

- name: Give admin rights
  command: /usr/local/bin/oc adm policy --config=/etc/origin/master/admin.kubeconfig add-cluster-role-to-user cluster-admin admin

- name: Fix kibana URLs
  command: /usr/local/bin/oc annotate ns {{ item }} --overwrite "openshift.io/logging.ui.hostname"="kibana.{{ domainSuffix }}"
  with_items: 
    - default
    - openshift-infra
    - kube-system
    - openshift
  when: installLogging == True

- name: Create registry.cert file
  local_action: shell cd /home/cloud-user/ocp.{{ domainSuffix }} ; cat fullchain1.pem privkey1.pem > registry.cert
  when: getCertificates == True

- name: Move registry.cert across to masters[0]
  copy:
    src: /home/cloud-user/ocp.{{ domainSuffix }}/registry.cert
    dest: /home/cloud-user/registry.cert
    owner: cloud-user
    mode: 0644 
  when: getCertificates == True 

- name: Create registry cert secret
  command: /usr/local/bin/oc secrets new console-secret /home/cloud-user/registry.cert -n default
  when: getCertificates == True

- name: Mount secret to registry console container and trigger new deploy
  command: /usr/local/bin/oc set volume dc/registry-console --add --type=secret --secret-name=console-secret -m /etc/cockpit/ws-certs.d -n default
  when: getCertificates == True

- name: Setup secondary network routers
  command: /usr/local/bin/oc adm router router-secondary --replicas=0 --selector='router=secondary' --service-account=router -n default
  when: multinetwork

- name: Setup secondary network router envs
  command: /usr/local/bin/oc set env dc/router-secondary ROUTE_LABELS="router-secondary=true" -n default
  when: multinetwork

- name: Allow Source IP to be received on primary router from the HAProxy
  command: /usr/local/bin/oc set env dc/router ROUTER_USE_PROXY_PROTOCOL=true -n default

- name: Allow Source IP to be received on secondary router from HAProxy
  command: /usr/local/bin/oc set env dc/router-secondary ROUTER_USE_PROXY_PROTOCOL=true -n default
  when: multinetwork

- name: Scale up secondary network routers
  vars:
    net2_scale: "{{ groups['nodes_net2'] | length }}"
  command: /usr/local/bin/oc scale dc router-secondary --replicas={{ net2_scale }} -n default
  when: multinetwork

- name: Setup routers for private networks (extra gateway)
  command: /usr/local/bin/oc adm router router-private --replicas=0 --selector='router-private=true' --service-account=router --stats-port=1937 --ports='7080:7080,7443:7443' -n default
  when: extra_gateway_vip is defined

- name: Setup private network router environment
  command: /usr/local/bin/oc set env dc/router-private {{ item }} -n default
  with_items:
    - ROUTER_SERVICE_HTTP_PORT=7080
    - ROUTER_SERVICE_HTTPS_PORT=7443
    - ROUTE_LABELS="router-private=true"
    - ROUTER_SERVICE_NO_SNI_PORT=11443
    - ROUTER_SERVICE_SNI_PORT=11444
  when: extra_gateway_vip is defined

- name: Scale up private network routers
  vars:
    infra_scale: "{{ groups['nodes_infra'] | length }}"
  command: /usr/local/bin/oc scale dc router-private --replicas={{ infra_scale }} -n default
  when: extra_gateway_vip is defined

- name: Allow Source IP to be received on private router from HAProxy
  command: /usr/local/bin/oc set env dc/router-private ROUTER_USE_PROXY_PROTOCOL=true -n default
  when: extra_gateway_vip is defined

- name: Create 'monitoring' serviceaccount for monitoring use
  command: /usr/local/bin/oc create serviceaccount monitoring -n openshift-infra

- name: Give 'monitoring' service account correct permissions
  command: /usr/local/bin/oc adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:openshift-infra:monitoring

- name: Patch nodeSelector into metrics-server deployment
  command: /usr/local/bin/oc patch deployment.apps/metrics-server -p '{"spec":{"template":{"spec":{"nodeSelector":{"infra":"'"true"'"}}}}}' -n openshift-metrics-server

- name: read fullchain cert into var
  shell: /usr/bin/awk '{printf "%s\n", $0}'  {{ item.file }}
  register: {{ item.var }}
  loop:
    - file: "/etc/origin/master/named_certificates/fullchain1.pem" 
      var: "fullchain"
    - file: "/etc/origin/master/named_certificates/privkey1.pem"
      var: "privkey"
  when: getCertificates == True

- name: Patch routes for updated hostnames and certs
  vars:
    contents: "{{ lookup('file', '/home/cloud-user/ocp.{{ domainSuffix }}/fullchain1.pem') }}"
  command: /usr/local/bin/oc patch route {{ item.service }} -p '{"spec":{"host":"{{ item.hostname }}.{{ domainSuffix }}","tls":{"certificate":"'"{{ fullchain.stdout_lines | join("\n") }}"'","key":"'"{{ privkey.stdout_lines | join("\n") }}"'"}}}' -n {{ item.namespace }}
  loop:
    - service: "alertmanager-main"
      namespace: "openshift-monitoring"
      hostname: "alertmanager"
    - service: "grafana"
      namespace: "openshift-monitoring"
      hostname: "grafana"
    - service: "prometheus-k8s"
      namespace: "openshift-monitoring"
      hostname: "prometheus"
  when: getCertificates == True
