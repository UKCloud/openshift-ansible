- name: Check if we have already set resolv.conf
  stat: 
    path: .resolv_conf_set
  register: status

- name: Set network manager DNS for internet hosts
  shell: nmcli c modify 'System eth0' ipv4.ignore-auto-dns yes ipv4.dns {{ hostvars[groups.dns[0]].ansible_default_ipv4.address }},{{ hostvars[groups.dns[1]].ansible_default_ipv4.address }} && nmcli c up "System eth0"  && touch .set_network_manager_dns
  args:
    creates: .set_network_manager_dns
  become: yes
  become_method: sudo
  when: inventory_hostname in groups.internet_all or inventory_hostname == 'localhost'

- name: Set network manager DNS for net2 hosts
  shell: nmcli c modify 'System eth0' ipv4.ignore-auto-dns yes ipv4.dns {{ hostvars[groups.dns_net2[0]].ansible_eth0.ipv4.address }},{{ hostvars[groups.dns_net2[1]].ansible_eth0.ipv4.address }} ipv4.gateway {{ net2_gateway }} ipv4.address {{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}/24 ipv4.method manual 802-3-ethernet.mtu 1446 && nmcli c up "System eth0"  && touch .set_network_manager_dns
  args:
    creates: .set_network_manager_dns
  become: yes
  become_method: sudo
  when: inventory_hostname in groups.net2_all

- name: add persistent routes for net2 nodes
  shell: nmcli connection modify "System eth0" +ipv4.routes "{{ item.route }} {{ item.gateway }}" && nmcli c up "System eth0"
  with_items: "{{ net2_node_routes }}"
  when: inventory_hostname in groups.nodes_net2

- name: add persistent routes for all net2 instances
  shell: nmcli connection modify "System eth0" +ipv4.routes "{{ item.route }} {{ item.gateway }}" && nmcli c up "System eth0"
  with_items: "{{ net2_routes }}"
  when: inventory_hostname in groups.net2_all

- name: add persistent routes for all nodes
  shell: nmcli connection modify "System eth0" +ipv4.routes "{{ item.route }} {{ item.gateway }}" && nmcli c up "System eth0"
  with_items: "{{ node_routes }}"
  when: set_node_routes and inventory_hostname != 'localhost'

- name: reload network service to apply routes
  service:
    name: network
    state: restarted 
  when: set_node_routes and inventory_hostname != 'localhost'
  
- name: Remove servers from chrony.conf
  replace:
    path: /etc/chrony.conf
    regexp: '^server.*iburst$'
    replace: ''
  when: multinetwork and inventory_hostname in groups.net2_all

- name: Add net2 ntp servers to chrony config file
  lineinfile:
    path: /etc/chrony.conf
    insertafter: '^#\sPlease\sconsider'
    line: server {{ item }} iburst
  with_items: "{{ net2_ntp_servers }}"
  when: multinetwork and inventory_hostname in groups.net2_all

- name: Restart chronyd to apply config changes
  service:
    name: chronyd
    state: restarted
  when: multinetwork and inventory_hostname in groups.net2_all

- name: Tidy up hosts file on bastion
  blockinfile:
    block: |
      127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
      ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
    path: /etc/hosts
    backup: yes
  when: inventory_hostname == 'localhost' and not status.stat.exists
  become: yes
  become_method: sudo

- name: disable TTY for sudo on all hosts
  lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults.*requiretty$'
    line: '#Defaults    requiretty'
    backup: yes
  become: yes
  become_method: sudo

- name: Create a file so we only run once
  file:
    path: .resolv_conf_set
    state: touch

- name: Restart keepalived now the network has been reloaded to bring up the VIP again
  systemd:
    name: keepalived
    state: restarted
    daemon_reload: yes
  when: inventory_hostname in groups.loadbalancers

- name: Check for docker proxy settings
  shell: systemctl cat --property=Environment docker | grep HTTPS_PROXY > /dev/null; echo $?
  register: proxy_result
  when: multinetwork and inventory_hostname in groups.nodes_net2
  become: yes
  become_method: sudo

- debug:
    var: proxy_result

- name: Setup proxys in environment on node
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK - proxy config"
    block: |
      http_proxy=http://{{ haproxy_vip }}:3128
      export http_proxy
      https_proxy=https://{{ haproxy_vip }}:3128
      export https_proxy
    path: /etc/environment
    backup: yes
    create: yes
  when: multinetwork and inventory_hostname in groups.nodes_net2
  become: yes
  become_method: sudo

- name: Setup http_proxy for docker daemon
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK - HTTP_PROXY"
    block: |
      [Service]
      Environment="HTTP_PROXY=http://{{ haproxy_vip }}:3128"
    path: /etc/systemd/system/docker.service.d/http-proxy.conf
    backup: no
    create: yes
  when: multinetwork and inventory_hostname in groups.nodes_net2 and proxy_result.stdout == "1"
  become: yes
  become_method: sudo

- name: Setup https_proxy for docker daemon
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK - HTTPS_PROXY"
    block: |
      [Service]
      Environment="HTTPS_PROXY=https://{{ haproxy_vip }}:3128"
    path: /etc/systemd/system/docker.service.d/https-proxy.conf
    backup: no
    create: yes
  when: multinetwork and inventory_hostname in groups.nodes_net2 and proxy_result.stdout == "1"
  become: yes
  become_method: sudo

- name: Reload and restart the docker daemon after applying the proxy changes
  systemd:
    state: restarted
    name: docker
    daemon_reload: yes
  when: (multinetwork and inventory_hostname in groups.nodes_net2) and (proxy_result.stdout == "1")
  become: yes
  become_method: sudo
