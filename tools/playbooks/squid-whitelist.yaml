---
- hosts: localhost, loadbalancers_controlplane
  tasks:
  - name: print time for debug logging purposes
    debug:
      var=ansible_date_time.date
    delegate_to: 127.0.0.1
    run_once: yes

  - name: print date for debug logging purposes
    debug:
      var=ansible_date_time.time
    delegate_to: 127.0.0.1
    run_once: yes

  - name: backup whitelist file
    copy:
      src: /etc/squid/sites.whitelist.txt
      dest: /etc/squid/sites.whitelist.txt.bk
      remote_src: yes
    when: inventory_hostname in groups.loadbalancers_controlplane and multinetwork

  - name: Retrieve whitelist from config-map
    shell: |
      /usr/bin/oc login https://ocp.{{ domainSuffix }}:8443 --token={{ lookup('file', '/home/cloud-user/whitelist-sa-token') }} > /dev/null
      /usr/bin/oc get configmaps proxy-whitelist -n whitelist -o jsonpath='{.data.proxy-whitelist\.txt}'
    when: inventory_hostname == 'localhost' and multinetwork
    register: proxy_whitelist

  - name: Fail play if task to retrieve whitelist fails
    fail:
      msg: "Failing to avoid blank whitelist update"
    when: hostvars['localhost'].proxy_whitelist.rc != 0

  - name: Insert changed block to /etc/squid/sites.whitelist.txt
    blockinfile:
      block: "{{ hostvars['localhost']['proxy_whitelist']['stdout'] }}"
      path: /etc/squid/sites.whitelist.txt
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK - Whitelisted domains #"
    become: yes
    when: inventory_hostname in groups.loadbalancers_controlplane and multinetwork
    notify:
      - reconfigure squid

  - meta: flush_handlers

  - name: Create error configmap if necessary
    shell: /usr/bin/oc patch cm proxy-whitelist -p '{"data":{"whitelist-error":"{{ reconfigure_status.stderr_lines[0]}}  {{ reconfigure_status.stderr_lines[1]}}"}}' -n whitelist
    when: reconfigure_status.rc == 1
    ignore_errors: true
    delegate_to: 127.0.0.1

  - name: revert to backed up whitelist file if reconfigure failed
    copy:
      src: /etc/squid/sites.whitelist.txt.bk
      dest: /etc/squid/sites.whitelist.txt
      remote_src: yes
    when: inventory_hostname in groups.loadbalancers_controlplane and reconfigure_status.rc == 1

  - meta: flush_handlers

  handlers:
    - name: reconfigure squid
      command: /usr/sbin/squid -k reconfigure
      become: yes
      ignore_errors: true
      when: inventory_hostname in groups.loadbalancers_controlplane
      register: reconfigure_status
